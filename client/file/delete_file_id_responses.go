// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// DeleteFileIDReader is a Reader for the DeleteFileID structure.
type DeleteFileIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteFileIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteFileIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteFileIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteFileIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteFileIDOK creates a DeleteFileIDOK with default headers values
func NewDeleteFileIDOK() *DeleteFileIDOK {
	return &DeleteFileIDOK{}
}

/*DeleteFileIDOK handles this case with default header values.

OK
*/
type DeleteFileIDOK struct {
	Payload *models.DeleteFileIDOKBody
}

func (o *DeleteFileIDOK) Error() string {
	return fmt.Sprintf("[DELETE /file/{id}][%d] deleteFileIdOK  %+v", 200, o.Payload)
}

func (o *DeleteFileIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteFileIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileIDUnauthorized creates a DeleteFileIDUnauthorized with default headers values
func NewDeleteFileIDUnauthorized() *DeleteFileIDUnauthorized {
	return &DeleteFileIDUnauthorized{}
}

/*DeleteFileIDUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteFileIDUnauthorized struct {
	Payload *models.StandardError
}

func (o *DeleteFileIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /file/{id}][%d] deleteFileIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteFileIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileIDForbidden creates a DeleteFileIDForbidden with default headers values
func NewDeleteFileIDForbidden() *DeleteFileIDForbidden {
	return &DeleteFileIDForbidden{}
}

/*DeleteFileIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteFileIDForbidden struct {
	Payload *models.StandardError
}

func (o *DeleteFileIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /file/{id}][%d] deleteFileIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteFileIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileIDNotFound creates a DeleteFileIDNotFound with default headers values
func NewDeleteFileIDNotFound() *DeleteFileIDNotFound {
	return &DeleteFileIDNotFound{}
}

/*DeleteFileIDNotFound handles this case with default header values.

Not Found
*/
type DeleteFileIDNotFound struct {
	Payload *models.StandardError
}

func (o *DeleteFileIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /file/{id}][%d] deleteFileIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFileIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

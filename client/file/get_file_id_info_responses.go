// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// GetFileIDInfoReader is a Reader for the GetFileIDInfo structure.
type GetFileIDInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFileIDInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFileIDInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetFileIDInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFileIDInfoOK creates a GetFileIDInfoOK with default headers values
func NewGetFileIDInfoOK() *GetFileIDInfoOK {
	return &GetFileIDInfoOK{}
}

/*GetFileIDInfoOK handles this case with default header values.

OK
*/
type GetFileIDInfoOK struct {
	Payload *models.GetFileIDInfoOKBody
}

func (o *GetFileIDInfoOK) Error() string {
	return fmt.Sprintf("[GET /file/{id}/info][%d] getFileIdInfoOK  %+v", 200, o.Payload)
}

func (o *GetFileIDInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetFileIDInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileIDInfoNotFound creates a GetFileIDInfoNotFound with default headers values
func NewGetFileIDInfoNotFound() *GetFileIDInfoNotFound {
	return &GetFileIDInfoNotFound{}
}

/*GetFileIDInfoNotFound handles this case with default header values.

Not Found
*/
type GetFileIDInfoNotFound struct {
	Payload *models.StandardError
}

func (o *GetFileIDInfoNotFound) Error() string {
	return fmt.Sprintf("[GET /file/{id}/info][%d] getFileIdInfoNotFound  %+v", 404, o.Payload)
}

func (o *GetFileIDInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

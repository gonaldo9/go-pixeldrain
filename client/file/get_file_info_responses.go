// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-pixeldrain/models"
)

// GetFileInfoReader is a Reader for the GetFileInfo structure.
type GetFileInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFileInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFileInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetFileInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFileInfoOK creates a GetFileInfoOK with default headers values
func NewGetFileInfoOK() *GetFileInfoOK {
	return &GetFileInfoOK{}
}

/*GetFileInfoOK handles this case with default header values.

OK
*/
type GetFileInfoOK struct {
	Payload *GetFileInfoOKBody
}

func (o *GetFileInfoOK) Error() string {
	return fmt.Sprintf("[GET /file/{id}/info][%d] getFileInfoOK  %+v", 200, o.Payload)
}

func (o *GetFileInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileInfoNotFound creates a GetFileInfoNotFound with default headers values
func NewGetFileInfoNotFound() *GetFileInfoNotFound {
	return &GetFileInfoNotFound{}
}

/*GetFileInfoNotFound handles this case with default header values.

Not Found
*/
type GetFileInfoNotFound struct {
	Payload *models.StandardError
}

func (o *GetFileInfoNotFound) Error() string {
	return fmt.Sprintf("[GET /file/{id}/info][%d] getFileInfoNotFound  %+v", 404, o.Payload)
}

func (o *GetFileInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetFileInfoOKBody get file info o k body
swagger:model GetFileInfoOKBody
*/
type GetFileInfoOKBody struct {

	// Timestamp of last viewed time
	// Format: date-time
	DateLastView strfmt.DateTime `json:"date_last_view,omitempty"`

	// Timestamp of uploaded time
	// Format: date-time
	DateUpload strfmt.DateTime `json:"date_upload,omitempty"`

	// Description of the file
	Description string `json:"description,omitempty"`

	// ID of the newly uploaded file
	ID string `json:"id,omitempty"`

	// Image associated with the mime type
	MimeImage string `json:"mime_image,omitempty"`

	// MIME type of the file
	MimeType string `json:"mime_type,omitempty"`

	// Name of the file
	Name string `json:"name,omitempty"`

	// Size of the file in Bytes
	Size int64 `json:"size,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// Link to a thumbnail of this file
	Thumbnail string `json:"thumbnail,omitempty"`

	// Amount of unique file views
	Views int64 `json:"views,omitempty"`
}

// Validate validates this get file info o k body
func (o *GetFileInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateLastView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileInfoOKBody) validateDateLastView(formats strfmt.Registry) error {

	if swag.IsZero(o.DateLastView) { // not required
		return nil
	}

	if err := validate.FormatOf("getFileInfoOK"+"."+"date_last_view", "body", "date-time", o.DateLastView.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetFileInfoOKBody) validateDateUpload(formats strfmt.Registry) error {

	if swag.IsZero(o.DateUpload) { // not required
		return nil
	}

	if err := validate.FormatOf("getFileInfoOK"+"."+"date_upload", "body", "date-time", o.DateUpload.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetFileInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

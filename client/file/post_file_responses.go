// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// PostFileReader is a Reader for the PostFile structure.
type PostFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 413:
		result := NewPostFileRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostFileOK creates a PostFileOK with default headers values
func NewPostFileOK() *PostFileOK {
	return &PostFileOK{}
}

/*PostFileOK handles this case with default header values.

ID of the newly uploaded file
*/
type PostFileOK struct {
	Payload *models.PostFileOKBody
}

func (o *PostFileOK) Error() string {
	return fmt.Sprintf("[POST /file][%d] postFileOK  %+v", 200, o.Payload)
}

func (o *PostFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostFileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFileRequestEntityTooLarge creates a PostFileRequestEntityTooLarge with default headers values
func NewPostFileRequestEntityTooLarge() *PostFileRequestEntityTooLarge {
	return &PostFileRequestEntityTooLarge{}
}

/*PostFileRequestEntityTooLarge handles this case with default header values.

Payload Too Large
*/
type PostFileRequestEntityTooLarge struct {
	Payload *models.StandardError
}

func (o *PostFileRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /file][%d] postFileRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostFileRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFileUnprocessableEntity creates a PostFileUnprocessableEntity with default headers values
func NewPostFileUnprocessableEntity() *PostFileUnprocessableEntity {
	return &PostFileUnprocessableEntity{}
}

/*PostFileUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type PostFileUnprocessableEntity struct {
	Payload *models.StandardError
}

func (o *PostFileUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /file][%d] postFileUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFileInternalServerError creates a PostFileInternalServerError with default headers values
func NewPostFileInternalServerError() *PostFileInternalServerError {
	return &PostFileInternalServerError{}
}

/*PostFileInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostFileInternalServerError struct {
	Payload *models.StandardError
}

func (o *PostFileInternalServerError) Error() string {
	return fmt.Sprintf("[POST /file][%d] postFileInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

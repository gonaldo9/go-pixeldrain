// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-pixeldrain/models"
)

// UploadFileReader is a Reader for the UploadFile structure.
type UploadFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewUploadFileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 413:
		result := NewUploadFileRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewUploadFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUploadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadFileCreated creates a UploadFileCreated with default headers values
func NewUploadFileCreated() *UploadFileCreated {
	return &UploadFileCreated{}
}

/*UploadFileCreated handles this case with default header values.

File is uploaded
*/
type UploadFileCreated struct {
	Payload *UploadFileCreatedBody
}

func (o *UploadFileCreated) Error() string {
	return fmt.Sprintf("[POST /file][%d] uploadFileCreated  %+v", 201, o.Payload)
}

func (o *UploadFileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadFileCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileRequestEntityTooLarge creates a UploadFileRequestEntityTooLarge with default headers values
func NewUploadFileRequestEntityTooLarge() *UploadFileRequestEntityTooLarge {
	return &UploadFileRequestEntityTooLarge{}
}

/*UploadFileRequestEntityTooLarge handles this case with default header values.

Payload Too Large
*/
type UploadFileRequestEntityTooLarge struct {
	Payload *models.StandardError
}

func (o *UploadFileRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /file][%d] uploadFileRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UploadFileRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileUnprocessableEntity creates a UploadFileUnprocessableEntity with default headers values
func NewUploadFileUnprocessableEntity() *UploadFileUnprocessableEntity {
	return &UploadFileUnprocessableEntity{}
}

/*UploadFileUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type UploadFileUnprocessableEntity struct {
	Payload *models.StandardError
}

func (o *UploadFileUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /file][%d] uploadFileUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UploadFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileInternalServerError creates a UploadFileInternalServerError with default headers values
func NewUploadFileInternalServerError() *UploadFileInternalServerError {
	return &UploadFileInternalServerError{}
}

/*UploadFileInternalServerError handles this case with default header values.

Internal Server Error
*/
type UploadFileInternalServerError struct {
	Payload *models.StandardError
}

func (o *UploadFileInternalServerError) Error() string {
	return fmt.Sprintf("[POST /file][%d] uploadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UploadFileCreatedBody upload file created body
swagger:model UploadFileCreatedBody
*/
type UploadFileCreatedBody struct {

	// ID of the newly uploaded file
	ID string `json:"id,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this upload file created body
func (o *UploadFileCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileCreatedBody) UnmarshalBinary(b []byte) error {
	var res UploadFileCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package list

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// CreateFileListReader is a Reader for the CreateFileList structure.
type CreateFileListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFileListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateFileListCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateFileListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateFileListCreated creates a CreateFileListCreated with default headers values
func NewCreateFileListCreated() *CreateFileListCreated {
	return &CreateFileListCreated{}
}

/* CreateFileListCreated describes a response with status code 201, with default header values.

List is created
*/
type CreateFileListCreated struct {
	Payload *CreateFileListCreatedBody
}

func (o *CreateFileListCreated) Error() string {
	return fmt.Sprintf("[POST /list][%d] createFileListCreated  %+v", 201, o.Payload)
}
func (o *CreateFileListCreated) GetPayload() *CreateFileListCreatedBody {
	return o.Payload
}

func (o *CreateFileListCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateFileListCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFileListDefault creates a CreateFileListDefault with default headers values
func NewCreateFileListDefault(code int) *CreateFileListDefault {
	return &CreateFileListDefault{
		_statusCode: code,
	}
}

/* CreateFileListDefault describes a response with status code -1, with default header values.

Error Response
*/
type CreateFileListDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the create file list default response
func (o *CreateFileListDefault) Code() int {
	return o._statusCode
}

func (o *CreateFileListDefault) Error() string {
	return fmt.Sprintf("[POST /list][%d] createFileList default  %+v", o._statusCode, o.Payload)
}
func (o *CreateFileListDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *CreateFileListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateFileListBody create file list body
swagger:model CreateFileListBody
*/
type CreateFileListBody struct {

	// Description of the list.
	// Example: An album of photos from my vacation in Austria
	Description string `json:"description,omitempty"`

	// Ordered array of files to add to the list
	// Example: [{"description":"First photo of the week, such a beautiful valley","id":"abc123"},{"description":"The week went by so quickly, here's a photo from the plane back","id":"123abc"}]
	// Required: true
	Files []*CreateFileListParamsBodyFilesItems0 `json:"files"`

	// Title of the list.
	// Example: My beautiful photos
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create file list body
func (o *CreateFileListBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateFileListBody) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("list"+"."+"files", "body", o.Files); err != nil {
		return err
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateFileListBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("list"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create file list body based on the context it is used
func (o *CreateFileListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateFileListBody) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Files); i++ {

		if o.Files[i] != nil {
			if err := o.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateFileListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateFileListBody) UnmarshalBinary(b []byte) error {
	var res CreateFileListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateFileListCreatedBody create file list created body
swagger:model CreateFileListCreatedBody
*/
type CreateFileListCreatedBody struct {

	// ID of the newly created list
	// Example: yay137
	ID string `json:"id,omitempty"`

	// success
	// Example: true
	Success bool `json:"success,omitempty"`
}

// Validate validates this create file list created body
func (o *CreateFileListCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create file list created body based on context it is used
func (o *CreateFileListCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateFileListCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateFileListCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateFileListCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateFileListParamsBodyFilesItems0 create file list params body files items0
swagger:model CreateFileListParamsBodyFilesItems0
*/
type CreateFileListParamsBodyFilesItems0 struct {

	// Description of the file
	// Example: First photo of the week, such a beautiful valley
	Description string `json:"description,omitempty"`

	// ID of the file
	// Example: abc123
	ID string `json:"id,omitempty"`
}

// Validate validates this create file list params body files items0
func (o *CreateFileListParamsBodyFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create file list params body files items0 based on context it is used
func (o *CreateFileListParamsBodyFilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateFileListParamsBodyFilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateFileListParamsBodyFilesItems0) UnmarshalBinary(b []byte) error {
	var res CreateFileListParamsBodyFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

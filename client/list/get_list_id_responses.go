// Code generated by go-swagger; DO NOT EDIT.

package list

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// GetListIDReader is a Reader for the GetListID structure.
type GetListIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetListIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetListIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetListIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetListIDOK creates a GetListIDOK with default headers values
func NewGetListIDOK() *GetListIDOK {
	return &GetListIDOK{}
}

/*GetListIDOK handles this case with default header values.

OK
*/
type GetListIDOK struct {
	Payload *models.GetListIDOKBody
}

func (o *GetListIDOK) Error() string {
	return fmt.Sprintf("[GET /list/{id}][%d] getListIdOK  %+v", 200, o.Payload)
}

func (o *GetListIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetListIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListIDNotFound creates a GetListIDNotFound with default headers values
func NewGetListIDNotFound() *GetListIDNotFound {
	return &GetListIDNotFound{}
}

/*GetListIDNotFound handles this case with default header values.

Not Found
*/
type GetListIDNotFound struct {
	Payload *models.StandardError
}

func (o *GetListIDNotFound) Error() string {
	return fmt.Sprintf("[GET /list/{id}][%d] getListIdNotFound  %+v", 404, o.Payload)
}

func (o *GetListIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

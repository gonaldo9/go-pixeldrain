// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jkawamoto/go-pixeldrain/models"
)

// ListFilesReader is a Reader for the ListFiles structure.
type ListFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListFilesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListFilesOK creates a ListFilesOK with default headers values
func NewListFilesOK() *ListFilesOK {
	return &ListFilesOK{}
}

/*
ListFilesOK describes a response with status code 200, with default header values.

OK
*/
type ListFilesOK struct {
	Payload *ListFilesOKBody
}

// IsSuccess returns true when this list files o k response has a 2xx status code
func (o *ListFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list files o k response has a 3xx status code
func (o *ListFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list files o k response has a 4xx status code
func (o *ListFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list files o k response has a 5xx status code
func (o *ListFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list files o k response a status code equal to that given
func (o *ListFilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list files o k response
func (o *ListFilesOK) Code() int {
	return 200
}

func (o *ListFilesOK) Error() string {
	return fmt.Sprintf("[GET /user/files][%d] listFilesOK  %+v", 200, o.Payload)
}

func (o *ListFilesOK) String() string {
	return fmt.Sprintf("[GET /user/files][%d] listFilesOK  %+v", 200, o.Payload)
}

func (o *ListFilesOK) GetPayload() *ListFilesOKBody {
	return o.Payload
}

func (o *ListFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListFilesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFilesDefault creates a ListFilesDefault with default headers values
func NewListFilesDefault(code int) *ListFilesDefault {
	return &ListFilesDefault{
		_statusCode: code,
	}
}

/*
ListFilesDefault describes a response with status code -1, with default header values.

Error Response
*/
type ListFilesDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// IsSuccess returns true when this list files default response has a 2xx status code
func (o *ListFilesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list files default response has a 3xx status code
func (o *ListFilesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list files default response has a 4xx status code
func (o *ListFilesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list files default response has a 5xx status code
func (o *ListFilesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list files default response a status code equal to that given
func (o *ListFilesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list files default response
func (o *ListFilesDefault) Code() int {
	return o._statusCode
}

func (o *ListFilesDefault) Error() string {
	return fmt.Sprintf("[GET /user/files][%d] listFiles default  %+v", o._statusCode, o.Payload)
}

func (o *ListFilesDefault) String() string {
	return fmt.Sprintf("[GET /user/files][%d] listFiles default  %+v", o._statusCode, o.Payload)
}

func (o *ListFilesDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *ListFilesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListFilesOKBody list files o k body
swagger:model ListFilesOKBody
*/
type ListFilesOKBody struct {

	// files
	Files []*models.FileInfo `json:"files"`
}

// Validate validates this list files o k body
func (o *ListFilesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListFilesOKBody) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list files o k body based on the context it is used
func (o *ListFilesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListFilesOKBody) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Files); i++ {

		if o.Files[i] != nil {

			if swag.IsZero(o.Files[i]) { // not required
				return nil
			}

			if err := o.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListFilesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListFilesOKBody) UnmarshalBinary(b []byte) error {
	var res ListFilesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

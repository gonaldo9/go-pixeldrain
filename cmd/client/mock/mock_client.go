// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	go_pixeldrain "github.com/jkawamoto/go-pixeldrain"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockClient) CreateList(ctx context.Context, title string, items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, title, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockClientMockRecorder) CreateList(ctx, title, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockClient)(nil).CreateList), ctx, title, items)
}

// Download mocks base method.
func (m *MockClient) Download(ctx context.Context, url, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, url, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockClientMockRecorder) Download(ctx, url, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockClient)(nil).Download), ctx, url, dir)
}

// DownloadURL mocks base method.
func (m *MockClient) DownloadURL(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURL", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadURL indicates an expected call of DownloadURL.
func (mr *MockClientMockRecorder) DownloadURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURL", reflect.TypeOf((*MockClient)(nil).DownloadURL), id)
}

// ListURL mocks base method.
func (m *MockClient) ListURL(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListURL", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// ListURL indicates an expected call of ListURL.
func (mr *MockClientMockRecorder) ListURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListURL", reflect.TypeOf((*MockClient)(nil).ListURL), id)
}

// Upload mocks base method.
func (m *MockClient) Upload(ctx context.Context, f go_pixeldrain.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockClientMockRecorder) Upload(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockClient)(nil).Upload), ctx, f)
}

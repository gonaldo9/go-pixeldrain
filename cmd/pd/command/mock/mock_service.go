// Code generated by MockGen. DO NOT EDIT.
// Source: mock_test.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"

	file "github.com/jkawamoto/go-pixeldrain/client/file"
	list "github.com/jkawamoto/go-pixeldrain/client/list"
	user "github.com/jkawamoto/go-pixeldrain/client/user"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateFileList mocks base method.
func (m *MockClientService) CreateFileList(params *list.CreateFileListParams, authInfo runtime.ClientAuthInfoWriter, opts ...list.ClientOption) (*list.CreateFileListCreated, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileList", varargs...)
	ret0, _ := ret[0].(*list.CreateFileListCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileList indicates an expected call of CreateFileList.
func (mr *MockClientServiceMockRecorder) CreateFileList(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileList", reflect.TypeOf((*MockClientService)(nil).CreateFileList), varargs...)
}

// DeleteFile mocks base method.
func (m *MockClientService) DeleteFile(params *file.DeleteFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...file.ClientOption) (*file.DeleteFileOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*file.DeleteFileOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockClientServiceMockRecorder) DeleteFile(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockClientService)(nil).DeleteFile), varargs...)
}

// DownloadFile mocks base method.
func (m *MockClientService) DownloadFile(params *file.DownloadFileParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...file.ClientOption) (*file.DownloadFileOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo, writer}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(*file.DownloadFileOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockClientServiceMockRecorder) DownloadFile(params, authInfo, writer interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo, writer}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockClientService)(nil).DownloadFile), varargs...)
}

// GetFileInfo mocks base method.
func (m *MockClientService) GetFileInfo(params *file.GetFileInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...file.ClientOption) (*file.GetFileInfoOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileInfo", varargs...)
	ret0, _ := ret[0].(*file.GetFileInfoOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockClientServiceMockRecorder) GetFileInfo(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockClientService)(nil).GetFileInfo), varargs...)
}

// GetFileList mocks base method.
func (m *MockClientService) GetFileList(params *list.GetFileListParams, authInfo runtime.ClientAuthInfoWriter, opts ...list.ClientOption) (*list.GetFileListOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileList", varargs...)
	ret0, _ := ret[0].(*list.GetFileListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockClientServiceMockRecorder) GetFileList(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockClientService)(nil).GetFileList), varargs...)
}

// GetFileThumbnail mocks base method.
func (m *MockClientService) GetFileThumbnail(params *file.GetFileThumbnailParams, authInfo runtime.ClientAuthInfoWriter, opts ...file.ClientOption) (*file.GetFileThumbnailOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileThumbnail", varargs...)
	ret0, _ := ret[0].(*file.GetFileThumbnailOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileThumbnail indicates an expected call of GetFileThumbnail.
func (mr *MockClientServiceMockRecorder) GetFileThumbnail(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileThumbnail", reflect.TypeOf((*MockClientService)(nil).GetFileThumbnail), varargs...)
}

// ListFileLists mocks base method.
func (m *MockClientService) ListFileLists(params *user.ListFileListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...user.ClientOption) (*user.ListFileListsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFileLists", varargs...)
	ret0, _ := ret[0].(*user.ListFileListsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileLists indicates an expected call of ListFileLists.
func (mr *MockClientServiceMockRecorder) ListFileLists(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileLists", reflect.TypeOf((*MockClientService)(nil).ListFileLists), varargs...)
}

// ListFiles mocks base method.
func (m *MockClientService) ListFiles(params *user.ListFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...user.ClientOption) (*user.ListFilesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiles", varargs...)
	ret0, _ := ret[0].(*user.ListFilesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockClientServiceMockRecorder) ListFiles(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockClientService)(nil).ListFiles), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}

// UploadFile mocks base method.
func (m *MockClientService) UploadFile(params *file.UploadFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...file.ClientOption) (*file.UploadFileCreated, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(*file.UploadFileCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientServiceMockRecorder) UploadFile(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClientService)(nil).UploadFile), varargs...)
}

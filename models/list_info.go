// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListInfo list info
//
// swagger:model ListInfo
type ListInfo struct {

	// Timestamp of creation time
	// Example: 2019-01-15T17:13:43Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"date_created,omitempty"`

	// The number of files in the list
	// Example: 1234
	FileCount int64 `json:"file_count,omitempty"`

	// ID of the newly uploaded file
	// Example: abc123
	// Required: true
	ID *string `json:"id"`

	// Title of the list.
	// Example: My beautiful photos
	Title *string `json:"title,omitempty"`
}

// Validate validates this list info
func (m *ListInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListInfo) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("date_created", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list info based on context it is used
func (m *ListInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListInfo) UnmarshalBinary(b []byte) error {
	var res ListInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
